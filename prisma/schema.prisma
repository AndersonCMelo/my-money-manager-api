// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  name       String
  email      String  @unique
  password   String?
  permission String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  bankAccounts BankAccounts[]

  @@map("users")
}

model Settings {
  id       String  @id @default(uuid())
  currency String // EUR / USD / BRL
  language String? // en / pt

  @@map("settings")
}

model Categories {
  id       String  @id @default(uuid())
  category String
  order    Int
  color    String
  extra    String?

  transactions Transactions[]

  @@map("categories")
}

model Estabilishments {
  id             String @id @default(uuid())
  estabilishment String

  @@map("estabilishments")
}

model BankAccounts {
  id             String  @id @default(uuid())
  openingBalance Int
  accountBalance Int
  bankName       String
  accountLabel   String?
  type           String? // checking_account / cash / investiments / saving_account / others
  // mainAccount    Boolean  @default(false)

  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  transactions Transactions[]

  @@index([ownerId])
  @@map("bank_accounts")
}

model Transactions {
  id             String   @id @default(uuid())
  amount         Int
  date           String
  description    String?  @db.Text
  estabilishment String?
  type           String // income / expense / transfer
  essencial      Boolean? // yes / no

  bankAccountId String?
  bankAccount   BankAccounts? @relation(fields: [bankAccountId], references: [id], onDelete: SetNull)

  destinationBankAccountId String?

  categoryId String?
  category   Categories? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([bankAccountId])
  @@index([categoryId])
  @@map("transactions")
}
